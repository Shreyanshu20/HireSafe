import React, { useState, useEffect } from "react";
import { toast } from "react-toastify";
import axios from "axios";

const server_url = import.meta.env.VITE_BACKEND_URL || "http://localhost:9000";

const client = axios.create({
  baseURL: server_url,
  withCredentials: true,
});

client.interceptors.request.use((config) => {
  const token = localStorage.getItem("userToken");
  if (token) {
    config.headers["x-auth-token"] = token;
    config.headers["Authorization"] = `Bearer ${token}`;
  }
  return config;
});

const generateInterviewCode = () => {
  const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
  let result = "";
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
};

// Simple screen size check
const isSmallScreen = () => {
  return window.innerWidth < 1024 || window.innerHeight < 600;
};

// Mobile restriction screen component
const MobileRestrictionScreen = () => {
  return (
    <div className="min-h-screen p-4 flex items-center justify-center bg-gradient-to-br from-gray-900 via-red-900/20 to-gray-900">
      <div className="w-full max-w-lg">
        <div className="rounded-2xl bg-gradient-to-br from-slate-900/90 to-slate-800/90 backdrop-blur-xl border border-red-500/20 shadow-2xl p-8 text-center">
          {/* Icon */}
          <div className="w-20 h-20 mx-auto mb-6 rounded-full bg-red-500/20 flex items-center justify-center">
            <i className="fa-solid fa-desktop text-red-400 text-3xl"></i>
          </div>

          {/* Title */}
          <h1 className="text-2xl font-bold text-white mb-4">
            Desktop Required
          </h1>

          {/* Message */}
          <p className="text-slate-300 mb-6 leading-relaxed">
            Interview sessions require a desktop or laptop computer for the best
            experience. This ensures proper camera positioning, keyboard
            functionality, and screen real estate for coding challenges.
          </p>

          {/* Features that require desktop */}
          <div className="space-y-3 mb-8 text-left">
            <div className="flex items-center gap-3 p-3 rounded-lg bg-slate-900/50 border border-white/10">
              <i className="fa-solid fa-code text-blue-400"></i>
              <span className="text-slate-200 text-sm">
                Code Editor with Full Keyboard
              </span>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-slate-900/50 border border-white/10">
              <i className="fa-solid fa-video text-purple-400"></i>
              <span className="text-slate-200 text-sm">
                Optimal Camera Positioning
              </span>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-slate-900/50 border border-white/10">
              <i className="fa-solid fa-eye text-green-400"></i>
              <span className="text-slate-200 text-sm">
                Face Detection & Monitoring
              </span>
            </div>
            <div className="flex items-center gap-3 p-3 rounded-lg bg-slate-900/50 border border-white/10">
              <i className="fa-solid fa-expand text-orange-400"></i>
              <span className="text-slate-200 text-sm">
                Multiple Panel Layout
              </span>
            </div>
          </div>

          {/* Instructions */}
          <div className="bg-blue-500/10 border border-blue-500/20 rounded-lg p-4 mb-6">
            <div className="flex items-center gap-2 mb-2">
              <i className="fa-solid fa-lightbulb text-blue-400"></i>
              <span className="text-blue-400 font-medium text-sm">
                How to Continue
              </span>
            </div>
            <p className="text-slate-300 text-sm">
              Please switch to a desktop or laptop computer and visit this page
              again to create or join an interview session.
            </p>
          </div>

          {/* Device info */}
          <div className="text-xs text-slate-500 space-y-1">
            <p>
              Current screen: {window.innerWidth} × {window.innerHeight}
            </p>
            <p>Required: 1024 × 600 minimum</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default function InterviewSetup({
  interviewCode,
  setInterviewCode,
  interviewState,
  setInterviewState,
  isValidatingCode,
  setIsValidatingCode,
  isCreatingInterview,
  setIsCreatingInterview,
  localVideoRef,
  onJoinInterview,
}) {
  const [copied, setCopied] = useState(false);
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);
  const [showMobileScreen, setShowMobileScreen] = useState(false);

  // Check screen size
  useEffect(() => {
    const checkScreenSize = () => {
      setShowMobileScreen(isSmallScreen());
    };

    checkScreenSize();
    window.addEventListener("resize", checkScreenSize);
    return () => window.removeEventListener("resize", checkScreenSize);
  }, []);

  // Start camera preview on component mount (only for desktop)
  useEffect(() => {
    if (showMobileScreen) return; // Don't start camera on small screens

    const startPreview = async () => {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: true,
          audio: true,
        });
        if (localVideoRef.current) {
          localVideoRef.current.srcObject = stream;
          window.localStream = stream;
        }
      } catch (error) {
        console.error("Error accessing camera:", error);
        toast.error("Please allow camera and microphone access");
      }
    };

    startPreview();

    // Cleanup on unmount
    return () => {
      console.log("🧹 InterviewSetup cleanup");
      if (localVideoRef.current && localVideoRef.current.srcObject) {
        const tracks = localVideoRef.current.srcObject.getTracks();
        tracks.forEach((track) => {
          console.log(`Stopping setup ${track.kind} track`);
          track.stop();
        });
        localVideoRef.current.srcObject = null;
      }

      if (window.localStream) {
        console.log("🌐 Clearing global stream in setup cleanup");
        window.localStream.getTracks().forEach((track) => {
          console.log(`Stopping global ${track.kind} track`);
          track.stop();
        });
        window.localStream = null;
      }
    };
  }, [localVideoRef, showMobileScreen]);

  // Auto-generate code on load for create mode
  useEffect(() => {
    if (showMobileScreen) return; // Don't generate code on small screens

    if (
      interviewState === "create" &&
      !interviewCode &&
      !isCreatingInterview &&
      !hasAutoGenerated
    ) {
      setHasAutoGenerated(true);
      handleCreateInterview();
    }
  }, [
    interviewState,
    interviewCode,
    isCreatingInterview,
    hasAutoGenerated,
    showMobileScreen,
  ]);

  // Reset auto-generate flag when switching modes
  useEffect(() => {
    if (interviewState !== "create") {
      setHasAutoGenerated(false);
    }
  }, [interviewState]);

  const copyCode = async () => {
    if (!interviewCode) return;
    try {
      await navigator.clipboard.writeText(interviewCode);
      setCopied(true);
      setTimeout(() => setCopied(false), 1200);
      toast.success("Interview code copied to clipboard!");
    } catch {
      toast.info("Tap and long-press to copy on mobile.");
    }
  };

  const handleCreateInterview = async () => {
    setIsCreatingInterview(true);
    let attempts = 0;
    const maxAttempts = 5;

    while (attempts < maxAttempts) {
      const newInterviewCode = generateInterviewCode();

      try {
        const response = await client.post("/interview/create", {
          session_id: newInterviewCode,
          interview_config: {
            duration_minutes: 60,
            face_detection_enabled: true,
            code_editor_enabled: true,
            recording_enabled: false,
          },
        });

        if (response.data.success) {
          setInterviewCode(newInterviewCode);
          setInterviewState("create");
          toast.success("Interview session created successfully!");
          break;
        }
      } catch (error) {
        console.error("Error creating interview:", error);
        if (error.response?.data?.message?.includes("already exists")) {
          attempts++;
          if (attempts >= maxAttempts) {
            toast.error(
              "Failed to generate unique interview code. Please try again."
            );
          }
          continue;
        } else {
          const errorMessage =
            error.response?.data?.message ||
            "Failed to create interview. Please try again.";
          toast.error(errorMessage);
          break;
        }
      }
    }

    setIsCreatingInterview(false);
  };

  const connectToInterview = async () => {
    if (!interviewCode) {
      toast.error("Please enter an interview code");
      return;
    }

    setIsValidatingCode(true);

    try {
      if (interviewState === "create") {
        onJoinInterview();
      } else {
        const response = await client.post("/interview/join", {
          session_id: interviewCode,
        });

        if (response.data.success) {
          onJoinInterview();
          toast.success("Joining interview...");
        }
      }
    } catch (error) {
      console.error("Error validating interview code:", error);
      const errorMessage =
        error.response?.data?.message ||
        "Failed to validate interview code. Please try again.";
      toast.error(errorMessage);
    } finally {
      setIsValidatingCode(false);
    }
  };

  // Show mobile restriction screen if screen is too small
  if (showMobileScreen) {
    return <MobileRestrictionScreen />;
  }

  return (
    <div className="min-h-screen p-2 sm:p-4 md:p-6 lg:p-8 flex items-center justify-center bg-gradient-to-br from-gray-900 via-purple-900/20 to-gray-900">
      <div className="w-full max-w-6xl">
        <div className="rounded-xl sm:rounded-2xl bg-gradient-to-br from-slate-900/90 to-slate-800/90 backdrop-blur-xl border border-white/10 shadow-2xl">
          {/* Header / Tabs */}
          <div className="flex flex-col gap-4 sm:gap-6 p-3 sm:p-4 md:p-6 border-b border-white/10 md:flex-row md:items-center md:justify-between">
            {/* Title Section */}
            <div className="flex items-center gap-3 sm:gap-4">
              <div className="h-10 w-10 sm:h-12 sm:w-12 rounded-xl bg-purple-600/20 flex items-center justify-center shrink-0">
                <i className="fa-solid fa-user-tie text-purple-400 text-lg sm:text-xl"></i>
              </div>
              <div className="min-w-0">
                <h1 className="text-xl sm:text-2xl md:text-3xl font-bold text-white tracking-tight">
                  Interviews
                </h1>
                <p className="text-xs sm:text-sm text-slate-300 mt-0.5 sm:mt-1">
                  Create or join a session
                </p>
              </div>
            </div>

            {/* Tabs */}
            <div className="flex rounded-lg sm:rounded-xl bg-slate-900/60 border border-white/10 p-1 self-stretch md:self-center">
              <button
                onClick={() => setInterviewState("create")}
                className={`flex-1 px-3 sm:px-6 py-2 sm:py-2.5 rounded-md sm:rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 flex items-center justify-center gap-1.5 sm:gap-2 ${
                  interviewState === "create"
                    ? "bg-purple-600 text-white shadow-lg"
                    : "text-slate-300 hover:bg-slate-800/80 hover:text-white"
                }`}
                disabled={isCreatingInterview}
              >
                <i className="fa-solid fa-plus"></i>
                Create
              </button>
              <button
                onClick={() => setInterviewState("join")}
                className={`flex-1 px-3 sm:px-6 py-2 sm:py-2.5 rounded-md sm:rounded-lg text-xs sm:text-sm font-medium transition-all duration-200 flex items-center justify-center gap-1.5 sm:gap-2 ${
                  interviewState === "join"
                    ? "bg-purple-600 text-white shadow-lg"
                    : "text-slate-300 hover:bg-slate-800/80 hover:text-white"
                }`}
              >
                <i className="fa-solid fa-right-to-bracket"></i>
                Join
              </button>
            </div>
          </div>

          {/* Main Content */}
          <div className="grid lg:grid-cols-2 gap-4 sm:gap-6 p-3 sm:p-4 md:p-6">
            {/* Left Column - Setup Options */}
            <div className="space-y-4 sm:space-y-6">
              {/* Create/Join Section */}
              <div className="space-y-4 bg-slate-900/40 rounded-lg sm:rounded-xl p-3 sm:p-4 md:p-6">
                {interviewState === "create" ? (
                  // Create mode UI
                  <div className="space-y-4">
                    <h2 className="text-base sm:text-lg font-semibold text-white flex items-center gap-2">
                      <i className="fa-solid fa-bolt text-yellow-400"></i>
                      Create New Interview
                    </h2>

                    {/* Code Display Panel */}
                    <div className="rounded-lg sm:rounded-xl border border-white/10 bg-slate-900/60 p-3 sm:p-4">
                      <div className="flex flex-col sm:flex-row gap-3 sm:gap-4 items-start sm:items-center justify-between">
                        <div className="w-full sm:w-auto">
                          <p className="text-xs sm:text-sm text-slate-400 mb-1">
                            Interview Code
                          </p>
                          <p className="text-lg sm:text-xl md:text-2xl font-mono tracking-wider text-white">
                            {isCreatingInterview ? (
                              <span className="flex items-center gap-2 text-purple-400">
                                <i className="fa-solid fa-spinner animate-spin"></i>
                                <span className="text-base sm:text-lg">
                                  Generating...
                                </span>
                              </span>
                            ) : (
                              interviewCode || "——————"
                            )}
                          </p>
                        </div>

                        {/* Action Buttons */}
                        <div className="flex gap-2 w-full sm:w-auto">
                          <button
                            onClick={handleCreateInterview}
                            disabled={isCreatingInterview}
                            className="flex-1 sm:flex-initial px-3 sm:px-4 py-2 text-xs sm:text-sm rounded-lg bg-purple-600 hover:bg-purple-700 disabled:bg-slate-700 text-white font-medium transition-colors flex items-center justify-center gap-1.5"
                          >
                            <i className="fa-solid fa-refresh"></i>
                            <span className="hidden sm:inline">New Code</span>
                          </button>
                          <button
                            onClick={copyCode}
                            disabled={!interviewCode || isCreatingInterview}
                            className="px-3 sm:px-4 py-2 rounded-lg border border-white/10 hover:bg-slate-800 disabled:opacity-50 text-white transition-colors"
                          >
                            <i
                              className={`fa-solid ${
                                copied ? "fa-check text-green-400" : "fa-copy"
                              }`}
                            ></i>
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  // Join mode UI
                  <div className="space-y-4">
                    <h2 className="text-base sm:text-lg font-semibold text-white flex items-center gap-2">
                      <i className="fa-solid fa-right-to-bracket text-sky-400"></i>
                      Join Interview
                    </h2>

                    <div className="space-y-2">
                      <label className="text-sm text-slate-300">
                        Interview Code
                      </label>
                      <div className="relative">
                        <input
                          type="text"
                          placeholder="Enter 6-digit code"
                          value={interviewCode || ""}
                          onChange={(e) =>
                            setInterviewCode(e.target.value.toUpperCase())
                          }
                          maxLength={6}
                          className="w-full bg-slate-900/60 border border-white/10 rounded-xl px-4 py-3 text-lg font-mono tracking-wider text-white placeholder:text-slate-500 focus:outline-none focus:ring-2 focus:ring-purple-500/50"
                        />
                        {interviewCode && (
                          <button
                            onClick={() => setInterviewCode("")}
                            className="absolute right-3 top-1/2 -translate-y-1/2 w-8 h-8 flex items-center justify-center rounded-lg hover:bg-slate-800/80 text-slate-400 hover:text-white transition-colors"
                          >
                            <i className="fa-solid fa-xmark"></i>
                          </button>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {/* Connect Button */}
                <button
                  onClick={connectToInterview}
                  disabled={
                    isValidatingCode ||
                    (interviewState === "join" && !interviewCode) ||
                    (interviewState === "create" && !interviewCode)
                  }
                  className="w-full mt-4 px-4 sm:px-6 py-2.5 sm:py-3 rounded-lg sm:rounded-xl text-sm sm:text-base font-semibold text-white bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 disabled:opacity-50 transition-all duration-200 flex items-center justify-center gap-2"
                >
                  {isValidatingCode ? (
                    <>
                      <i className="fa-solid fa-spinner animate-spin"></i>
                      <span className="hidden sm:inline">Validating...</span>
                      <span className="sm:hidden">Loading...</span>
                    </>
                  ) : (
                    <>
                      <i className="fa-solid fa-plug"></i>
                      <span className="hidden sm:inline">
                        Connect to Interview
                      </span>
                      <span className="sm:hidden">Connect</span>
                    </>
                  )}
                </button>
              </div>

              {/* Features Grid */}
              <div className="grid grid-cols-1 xs:grid-cols-2 gap-2 sm:gap-4 p-3 sm:p-4 bg-slate-900/40 rounded-lg sm:rounded-xl">
                {[
                  { icon: "fa-code", color: "emerald", text: "Code Editor" },
                  { icon: "fa-eye", color: "sky", text: "Live Monitoring" },
                  { icon: "fa-video", color: "purple", text: "HD Video" },
                  { icon: "fa-message", color: "pink", text: "Live Chat" },
                ].map((feature, index) => (
                  <div
                    key={index}
                    className="flex items-center gap-2 sm:gap-3 p-2 sm:p-3 rounded-md sm:rounded-lg bg-slate-900/30"
                  >
                    <i
                      className={`fa-solid ${feature.icon} text-${feature.color}-400 text-base sm:text-lg`}
                    ></i>
                    <span className="text-slate-200 text-xs sm:text-sm">
                      {feature.text}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Right Column - Video Preview */}
            <div className="space-y-3 sm:space-y-4">
              <h3 className="text-base sm:text-lg font-semibold text-white flex items-center gap-2">
                <i className="fa-solid fa-camera text-purple-400"></i>
                Camera Preview
              </h3>

              <div className="relative rounded-lg sm:rounded-2xl overflow-hidden border border-white/10 bg-slate-900/60">
                <video
                  ref={localVideoRef}
                  autoPlay
                  muted
                  playsInline
                  className="w-full aspect-video object-cover"
                ></video>
                <div className="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent pointer-events-none"></div>
              </div>

              <p className="text-xs sm:text-sm text-slate-400 flex items-center gap-1.5 sm:gap-2">
                <i className="fa-solid fa-circle-info text-blue-400"></i>
                Please ensure your camera and microphone are working properly
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
